```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract SharkyToken is ERC20, Ownable {
    constructor(uint256 initialSupply) ERC20("SharkyToken", "SHARKY") {
        _mint(msg.sender, initialSupply);
    }

    function mint(address to, uint256 amount) external onlyOwner {
        _mint(to, amount);
    }
}
```

### Liquidity Pool Contract

A simple liquidity pool contract could look something like this:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract SharkyLiquidityPool is Ownable {
    IERC20 public liquidityToken;
    mapping(address => uint256) public balanceOf;

    event LiquidityAdded(address indexed provider, uint256 amount);
    event LiquidityRemoved(address indexed provider, uint256 amount);

    constructor(IERC20 _liquidityToken) {
        liquidityToken = _liquidityToken;
    }

    function addLiquidity(uint256 amount) external {
        liquidityToken.transferFrom(msg.sender, address(this), amount);
        balanceOf[msg.sender] += amount;
        emit LiquidityAdded(msg.sender, amount);
    }

    function removeLiquidity(uint256 amount) external {
        require(balanceOf[msg.sender] >= amount, "Insufficient balance");
        liquidityToken.transfer(msg.sender, amount);
        balanceOf[msg.sender] -= amount;
        emit LiquidityRemoved(msg.sender, amount);
    }
}
```

### Staking Contract

Here's a simple staking contract where users can stake their tokens and earn rewards.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract SharkyStaking is Ownable {
    IERC20 public stakingToken;
    uint256 public rewardRate = 100; // Reward tokens per block

    struct Stake {
        uint256 amount;
        uint256 lastStakedTime;
        uint256 rewards;
    }

    mapping(address => Stake) public stakes;

    event Staked(address indexed user, uint256 amount);
    event Unstaked(address indexed user, uint256 amount);
    event RewardPaid(address indexed user, uint256 reward);

    constructor(IERC20 _stakingToken) {
        stakingToken = _stakingToken;
    }

    function stake(uint256 amount) external {
        require(amount > 0, "Cannot stake 0");
        stakes[msg.sender].amount += amount;
        stakes[msg.sender].lastStakedTime = block.timestamp;

        stakingToken.transferFrom(msg.sender, address(this), amount);
        emit Staked(msg.sender, amount);
    }

    function unstake(uint256 amount) external {
        require(stakes[msg.sender].amount >= amount, "Insufficient staked balance");
        stakes[msg.sender].amount -= amount;

        stakingToken.transfer(msg.sender, amount);
        emit Unstaked(msg.sender, amount);
    }

    function claimRewards() external {
        uint256 reward = calculateRewards(msg.sender);
        stakes[msg.sender].rewards = 0; // Reset rewards
        stakingToken.mint(msg.sender, reward); // Minting rewards
        emit RewardPaid(msg.sender, reward);
    }

    function calculateRewards(address user) internal view returns (uint256) {
        Stake storage stake = stakes[user];
        return ((block.timestamp - stake.lastStakedTime) * rewardRate);
    }
}
```
